// Code generated by protoc-gen-go. DO NOT EDIT.
// source: daytrader.proto

package daytrader

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Amount               float32  `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Symbol               string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Filename             string   `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	TransactionId        int32    `protobuf:"varint,5,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_59c1366fd5914009, []int{0}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Command) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Command) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Command) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Command) GetTransactionId() int32 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *Command) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Log struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	ServerName           string   `protobuf:"bytes,2,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	TransactionNum       int32    `protobuf:"varint,3,opt,name=transaction_num,json=transactionNum,proto3" json:"transaction_num,omitempty"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	StockSymbol          string   `protobuf:"bytes,5,opt,name=stock_symbol,json=stockSymbol,proto3" json:"stock_symbol,omitempty"`
	Price                float32  `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`
	Funds                float32  `protobuf:"fixed32,7,opt,name=funds,proto3" json:"funds,omitempty"`
	Filename             string   `protobuf:"bytes,8,opt,name=filename,proto3" json:"filename,omitempty"`
	CryptoKey            string   `protobuf:"bytes,9,opt,name=crypto_key,json=cryptoKey,proto3" json:"crypto_key,omitempty"`
	QuoteServerTime      int64    `protobuf:"varint,10,opt,name=quote_server_time,json=quoteServerTime,proto3" json:"quote_server_time,omitempty"`
	AccountAction        string   `protobuf:"bytes,11,opt,name=account_action,json=accountAction,proto3" json:"account_action,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,12,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	DebugMessage         string   `protobuf:"bytes,13,opt,name=debug_message,json=debugMessage,proto3" json:"debug_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_59c1366fd5914009, []int{1}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Log) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *Log) GetTransactionNum() int32 {
	if m != nil {
		return m.TransactionNum
	}
	return 0
}

func (m *Log) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Log) GetStockSymbol() string {
	if m != nil {
		return m.StockSymbol
	}
	return ""
}

func (m *Log) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Log) GetFunds() float32 {
	if m != nil {
		return m.Funds
	}
	return 0
}

func (m *Log) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Log) GetCryptoKey() string {
	if m != nil {
		return m.CryptoKey
	}
	return ""
}

func (m *Log) GetQuoteServerTime() int64 {
	if m != nil {
		return m.QuoteServerTime
	}
	return 0
}

func (m *Log) GetAccountAction() string {
	if m != nil {
		return m.AccountAction
	}
	return ""
}

func (m *Log) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *Log) GetDebugMessage() string {
	if m != nil {
		return m.DebugMessage
	}
	return ""
}

type DumplogUser struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DumplogUser) Reset()         { *m = DumplogUser{} }
func (m *DumplogUser) String() string { return proto.CompactTextString(m) }
func (*DumplogUser) ProtoMessage()    {}
func (*DumplogUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_59c1366fd5914009, []int{2}
}

func (m *DumplogUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DumplogUser.Unmarshal(m, b)
}
func (m *DumplogUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DumplogUser.Marshal(b, m, deterministic)
}
func (m *DumplogUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumplogUser.Merge(m, src)
}
func (m *DumplogUser) XXX_Size() int {
	return xxx_messageInfo_DumplogUser.Size(m)
}
func (m *DumplogUser) XXX_DiscardUnknown() {
	xxx_messageInfo_DumplogUser.DiscardUnknown(m)
}

var xxx_messageInfo_DumplogUser proto.InternalMessageInfo

func (m *DumplogUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type Response struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_59c1366fd5914009, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Command)(nil), "daytrader.command")
	proto.RegisterType((*Log)(nil), "daytrader.log")
	proto.RegisterType((*DumplogUser)(nil), "daytrader.dumplog_user")
	proto.RegisterType((*Response)(nil), "daytrader.Response")
}

func init() { proto.RegisterFile("daytrader.proto", fileDescriptor_59c1366fd5914009) }

var fileDescriptor_59c1366fd5914009 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0xa5, 0xed, 0xfa, 0x75, 0xd7, 0x74, 0xc2, 0x03, 0x16, 0x4d, 0x42, 0x94, 0x02, 0x5a, 0xc5,
	0xc3, 0x04, 0x03, 0x6d, 0x62, 0x20, 0xa4, 0x6e, 0xdd, 0xc3, 0x44, 0x99, 0x44, 0x52, 0x9e, 0x23,
	0x2f, 0xf1, 0xa2, 0x68, 0x71, 0x1c, 0x6c, 0x67, 0x52, 0xfe, 0x0f, 0x2f, 0x48, 0xfc, 0x13, 0xfe,
	0x14, 0xb2, 0x9d, 0x76, 0x01, 0x69, 0xd2, 0xdc, 0xb7, 0xde, 0x73, 0xef, 0xf1, 0xb9, 0xf7, 0x1e,
	0xbb, 0x2d, 0x6c, 0x45, 0xb8, 0x94, 0x1c, 0x47, 0x84, 0xef, 0xe7, 0x9c, 0x49, 0x86, 0xfa, 0x2b,
	0x60, 0xfc, 0xab, 0x01, 0xdd, 0x90, 0x51, 0x8a, 0xb3, 0x08, 0xed, 0x40, 0xb7, 0x10, 0x84, 0x07,
	0x49, 0xe4, 0x36, 0x46, 0x8d, 0x49, 0xdf, 0xeb, 0xa8, 0xf0, 0x3c, 0x42, 0x4f, 0xa0, 0x83, 0x29,
	0x2b, 0x32, 0xe9, 0x36, 0x47, 0x8d, 0x49, 0xd3, 0xab, 0x22, 0x85, 0x8b, 0x92, 0x5e, 0xb2, 0xd4,
	0x6d, 0x99, 0x7a, 0x13, 0xa1, 0x5d, 0xe8, 0x5d, 0x25, 0x29, 0xc9, 0x30, 0x25, 0xee, 0x86, 0xce,
	0xac, 0x62, 0xf4, 0x0a, 0x86, 0x92, 0xe3, 0x4c, 0xe0, 0x50, 0x26, 0x2c, 0x53, 0x5a, 0xed, 0x51,
	0x63, 0xd2, 0xf6, 0x9c, 0x1a, 0x7a, 0x1e, 0x21, 0x04, 0x1b, 0x9a, 0xde, 0xd1, 0x74, 0xfd, 0x79,
	0xfc, 0xbb, 0x05, 0xad, 0x94, 0xc5, 0xc8, 0x5d, 0xb5, 0x5c, 0xf5, 0xb9, 0x9a, 0xe0, 0x19, 0x6c,
	0x0a, 0xc2, 0x6f, 0x08, 0x0f, 0x34, 0xb9, 0xa9, 0xb3, 0x60, 0xa0, 0x0b, 0xa5, 0xbe, 0x07, 0x5b,
	0x75, 0xf5, 0xac, 0xa0, 0xba, 0xf5, 0xb6, 0x57, 0x6f, 0xea, 0xa2, 0xa0, 0x6a, 0x04, 0x35, 0x7c,
	0x7d, 0x84, 0x65, 0x8c, 0x9e, 0xc3, 0x40, 0x48, 0x16, 0x5e, 0x07, 0xd5, 0xf0, 0x6d, 0x9d, 0xdf,
	0xd4, 0x98, 0x6f, 0x36, 0xf0, 0x08, 0xda, 0x39, 0x4f, 0x42, 0xd3, 0x7f, 0xd3, 0x33, 0x81, 0x42,
	0xaf, 0x8a, 0x2c, 0x12, 0x6e, 0xd7, 0xa0, 0x3a, 0xf8, 0x67, 0x5b, 0xbd, 0xff, 0xb6, 0xf5, 0x14,
	0x20, 0xe4, 0x65, 0x2e, 0x59, 0x70, 0x4d, 0x4a, 0xb7, 0xaf, 0xb3, 0x7d, 0x83, 0x7c, 0x21, 0x25,
	0x7a, 0x0d, 0x0f, 0x7f, 0x14, 0x4c, 0x92, 0xa0, 0x9a, 0x5a, 0x26, 0x94, 0xb8, 0x30, 0x6a, 0x4c,
	0x5a, 0xde, 0x96, 0x4e, 0xf8, 0x1a, 0x5f, 0x24, 0x66, 0xf1, 0x38, 0x0c, 0x95, 0x6f, 0x81, 0x19,
	0xd3, 0xdd, 0xd4, 0xc7, 0x39, 0x15, 0x3a, 0xd5, 0x20, 0x7a, 0x01, 0x0e, 0xe1, 0x9c, 0xf1, 0x80,
	0x12, 0x21, 0x70, 0x4c, 0xdc, 0x81, 0xae, 0x1a, 0x68, 0xf0, 0xab, 0xc1, 0x54, 0x51, 0x44, 0x2e,
	0x8b, 0x78, 0x55, 0xe4, 0x98, 0x22, 0x0d, 0x56, 0x45, 0xe3, 0x3d, 0x18, 0x44, 0x05, 0xcd, 0x53,
	0x16, 0x07, 0x6a, 0x75, 0x77, 0x5e, 0xaf, 0xf1, 0x4b, 0xe8, 0x79, 0x44, 0xe4, 0x2c, 0x13, 0x44,
	0x79, 0xbb, 0x3c, 0xb3, 0xf2, 0xb6, 0x0a, 0x0f, 0x7e, 0xb6, 0xa0, 0x33, 0x67, 0x71, 0x4c, 0x38,
	0x3a, 0x82, 0xe1, 0x9c, 0xc5, 0xdf, 0x05, 0xe1, 0xa7, 0x95, 0xf1, 0xc3, 0xfd, 0xdb, 0x3b, 0x9e,
	0xb2, 0x78, 0x77, 0xbb, 0x16, 0x2f, 0xcf, 0x1e, 0x3f, 0x40, 0x9f, 0x60, 0x7b, 0xce, 0xe2, 0x6f,
	0xb7, 0x9b, 0x39, 0xbb, 0x21, 0x99, 0xbc, 0x2f, 0xfb, 0x33, 0x3c, 0x9e, 0xb3, 0x78, 0x6a, 0xd6,
	0xb5, 0xb8, 0xbd, 0x2f, 0xf7, 0xe5, 0x9b, 0xb6, 0xfd, 0x52, 0x48, 0x42, 0xad, 0x84, 0x0f, 0xc1,
	0x99, 0xb3, 0xf8, 0x4c, 0x39, 0xb0, 0x06, 0x6f, 0xa6, 0x4c, 0xb1, 0xe2, 0x1d, 0x43, 0x6f, 0x56,
	0xd0, 0x7c, 0xce, 0x62, 0x81, 0x76, 0x6a, 0x25, 0x75, 0x3b, 0xef, 0xe0, 0x1e, 0xfc, 0xe9, 0x42,
	0x7f, 0x86, 0xcb, 0x85, 0x4e, 0xa0, 0x23, 0x80, 0x53, 0x4e, 0xb0, 0x24, 0xca, 0x2c, 0x84, 0x6a,
	0x94, 0xea, 0xc9, 0xde, 0xd5, 0xc2, 0x1b, 0x68, 0x4d, 0xa3, 0xc8, 0x86, 0x71, 0x00, 0x6d, 0x6d,
	0xac, 0xa5, 0xca, 0x49, 0x51, 0xda, 0x30, 0xde, 0xc2, 0x86, 0x4f, 0xd2, 0xd4, 0x86, 0x72, 0x08,
	0x7d, 0x75, 0x4d, 0x13, 0x69, 0x29, 0xa5, 0x76, 0xa7, 0x79, 0xeb, 0x08, 0xe2, 0x2c, 0x24, 0xe9,
	0x1a, 0x82, 0x9a, 0x67, 0x2b, 0xf8, 0x01, 0x06, 0x3e, 0x51, 0xe3, 0x4d, 0xcd, 0xef, 0x82, 0x05,
	0xf5, 0x18, 0x1c, 0x9f, 0xe8, 0x09, 0xd7, 0xe5, 0x9e, 0x14, 0xe5, 0x82, 0x27, 0xfa, 0x7b, 0xc1,
	0x82, 0xfb, 0x11, 0x86, 0x95, 0xee, 0x1a, 0xe4, 0x63, 0x70, 0x96, 0x8b, 0x92, 0x6b, 0xec, 0x6a,
	0xc5, 0xb5, 0xf4, 0xe7, 0x3d, 0x74, 0xab, 0x67, 0x69, 0x39, 0xe9, 0x2c, 0x11, 0x79, 0x8a, 0x4b,
	0xbf, 0xa0, 0x14, 0x73, 0x1b, 0xc9, 0xcb, 0x8e, 0xfe, 0xc3, 0xf0, 0xee, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x42, 0x8e, 0x93, 0xa4, 0x43, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	LogUserCommand(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error)
	LogQuoteServerEvent(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error)
	LogAccountTransaction(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error)
	LogSystemEvent(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error)
	LogErrorEvent(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error)
	LogDebugEvent(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error)
	DumpLogs(ctx context.Context, in *DumplogUser, opts ...grpc.CallOption) (*Response, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) LogUserCommand(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.Logger/LogUserCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) LogQuoteServerEvent(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.Logger/LogQuoteServerEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) LogAccountTransaction(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.Logger/LogAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) LogSystemEvent(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.Logger/LogSystemEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) LogErrorEvent(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.Logger/LogErrorEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) LogDebugEvent(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.Logger/LogDebugEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) DumpLogs(ctx context.Context, in *DumplogUser, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.Logger/DumpLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	LogUserCommand(context.Context, *Log) (*Response, error)
	LogQuoteServerEvent(context.Context, *Log) (*Response, error)
	LogAccountTransaction(context.Context, *Log) (*Response, error)
	LogSystemEvent(context.Context, *Log) (*Response, error)
	LogErrorEvent(context.Context, *Log) (*Response, error)
	LogDebugEvent(context.Context, *Log) (*Response, error)
	DumpLogs(context.Context, *DumplogUser) (*Response, error)
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_LogUserCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogUserCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.Logger/LogUserCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogUserCommand(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_LogQuoteServerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogQuoteServerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.Logger/LogQuoteServerEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogQuoteServerEvent(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_LogAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.Logger/LogAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogAccountTransaction(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_LogSystemEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogSystemEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.Logger/LogSystemEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogSystemEvent(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_LogErrorEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogErrorEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.Logger/LogErrorEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogErrorEvent(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_LogDebugEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogDebugEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.Logger/LogDebugEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogDebugEvent(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_DumpLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumplogUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).DumpLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.Logger/DumpLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).DumpLogs(ctx, req.(*DumplogUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "daytrader.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogUserCommand",
			Handler:    _Logger_LogUserCommand_Handler,
		},
		{
			MethodName: "LogQuoteServerEvent",
			Handler:    _Logger_LogQuoteServerEvent_Handler,
		},
		{
			MethodName: "LogAccountTransaction",
			Handler:    _Logger_LogAccountTransaction_Handler,
		},
		{
			MethodName: "LogSystemEvent",
			Handler:    _Logger_LogSystemEvent_Handler,
		},
		{
			MethodName: "LogErrorEvent",
			Handler:    _Logger_LogErrorEvent_Handler,
		},
		{
			MethodName: "LogDebugEvent",
			Handler:    _Logger_LogDebugEvent_Handler,
		},
		{
			MethodName: "DumpLogs",
			Handler:    _Logger_DumpLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daytrader.proto",
}

// DayTraderClient is the client API for DayTrader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DayTraderClient interface {
	CreateUser(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	Add(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	Quote(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	Buy(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	Sell(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	CommitBuy(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	CommitSell(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	CancelBuy(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	CancelSell(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	SetBuyAmount(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	SetSellAmount(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	SetBuyTrigger(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	SetSellTrigger(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	CancelSetSell(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	CancelSetBuy(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	DumpLog(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	DisplaySummary(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
}

type dayTraderClient struct {
	cc *grpc.ClientConn
}

func NewDayTraderClient(cc *grpc.ClientConn) DayTraderClient {
	return &dayTraderClient{cc}
}

func (c *dayTraderClient) CreateUser(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) Add(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) Quote(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/Quote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) Buy(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) Sell(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/Sell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) CommitBuy(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/CommitBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) CommitSell(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/CommitSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) CancelBuy(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/CancelBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) CancelSell(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/CancelSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) SetBuyAmount(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/SetBuyAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) SetSellAmount(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/SetSellAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) SetBuyTrigger(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/SetBuyTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) SetSellTrigger(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/SetSellTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) CancelSetSell(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/CancelSetSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) CancelSetBuy(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/CancelSetBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) DumpLog(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/DumpLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayTraderClient) DisplaySummary(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/daytrader.DayTrader/DisplaySummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DayTraderServer is the server API for DayTrader service.
type DayTraderServer interface {
	CreateUser(context.Context, *Command) (*Response, error)
	Add(context.Context, *Command) (*Response, error)
	Quote(context.Context, *Command) (*Response, error)
	Buy(context.Context, *Command) (*Response, error)
	Sell(context.Context, *Command) (*Response, error)
	CommitBuy(context.Context, *Command) (*Response, error)
	CommitSell(context.Context, *Command) (*Response, error)
	CancelBuy(context.Context, *Command) (*Response, error)
	CancelSell(context.Context, *Command) (*Response, error)
	SetBuyAmount(context.Context, *Command) (*Response, error)
	SetSellAmount(context.Context, *Command) (*Response, error)
	SetBuyTrigger(context.Context, *Command) (*Response, error)
	SetSellTrigger(context.Context, *Command) (*Response, error)
	CancelSetSell(context.Context, *Command) (*Response, error)
	CancelSetBuy(context.Context, *Command) (*Response, error)
	DumpLog(context.Context, *Command) (*Response, error)
	DisplaySummary(context.Context, *Command) (*Response, error)
}

func RegisterDayTraderServer(s *grpc.Server, srv DayTraderServer) {
	s.RegisterService(&_DayTrader_serviceDesc, srv)
}

func _DayTrader_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).CreateUser(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).Add(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_Quote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).Quote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/Quote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).Quote(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).Buy(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/Sell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).Sell(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_CommitBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).CommitBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/CommitBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).CommitBuy(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_CommitSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).CommitSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/CommitSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).CommitSell(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_CancelBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).CancelBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/CancelBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).CancelBuy(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_CancelSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).CancelSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/CancelSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).CancelSell(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_SetBuyAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).SetBuyAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/SetBuyAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).SetBuyAmount(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_SetSellAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).SetSellAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/SetSellAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).SetSellAmount(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_SetBuyTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).SetBuyTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/SetBuyTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).SetBuyTrigger(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_SetSellTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).SetSellTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/SetSellTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).SetSellTrigger(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_CancelSetSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).CancelSetSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/CancelSetSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).CancelSetSell(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_CancelSetBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).CancelSetBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/CancelSetBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).CancelSetBuy(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_DumpLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).DumpLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/DumpLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).DumpLog(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayTrader_DisplaySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayTraderServer).DisplaySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daytrader.DayTrader/DisplaySummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayTraderServer).DisplaySummary(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _DayTrader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "daytrader.DayTrader",
	HandlerType: (*DayTraderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _DayTrader_CreateUser_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _DayTrader_Add_Handler,
		},
		{
			MethodName: "Quote",
			Handler:    _DayTrader_Quote_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _DayTrader_Buy_Handler,
		},
		{
			MethodName: "Sell",
			Handler:    _DayTrader_Sell_Handler,
		},
		{
			MethodName: "CommitBuy",
			Handler:    _DayTrader_CommitBuy_Handler,
		},
		{
			MethodName: "CommitSell",
			Handler:    _DayTrader_CommitSell_Handler,
		},
		{
			MethodName: "CancelBuy",
			Handler:    _DayTrader_CancelBuy_Handler,
		},
		{
			MethodName: "CancelSell",
			Handler:    _DayTrader_CancelSell_Handler,
		},
		{
			MethodName: "SetBuyAmount",
			Handler:    _DayTrader_SetBuyAmount_Handler,
		},
		{
			MethodName: "SetSellAmount",
			Handler:    _DayTrader_SetSellAmount_Handler,
		},
		{
			MethodName: "SetBuyTrigger",
			Handler:    _DayTrader_SetBuyTrigger_Handler,
		},
		{
			MethodName: "SetSellTrigger",
			Handler:    _DayTrader_SetSellTrigger_Handler,
		},
		{
			MethodName: "CancelSetSell",
			Handler:    _DayTrader_CancelSetSell_Handler,
		},
		{
			MethodName: "CancelSetBuy",
			Handler:    _DayTrader_CancelSetBuy_Handler,
		},
		{
			MethodName: "DumpLog",
			Handler:    _DayTrader_DumpLog_Handler,
		},
		{
			MethodName: "DisplaySummary",
			Handler:    _DayTrader_DisplaySummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daytrader.proto",
}
